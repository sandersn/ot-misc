module test-ot
import rcd
import types
import hydrogen
import list
fun test(expected: a, actual: a, ?(==): (a, a) -> bool, ?show: a -> string): console/console ()
  if actual == expected
    then print(".")
    else println("\n\t\tFail: expected \n" ++ expected.show ++ "\n\t\tbut got \n" ++ actual.show ++ "\n")
  
fun test-abs-to-relative()
  // abs is without titles right now
  val abs = [["foo", "foo", "", "1", "", "2"],
               ["", "oof","1",  "", "", "1"],
               ["", "oaf", "",  "2", "", ""]]
  // This is the "backward language" so foo -> oof
  val rel = [[1,0,1],
             [2,0,-1]]
  test(rel, abs-to-relative(abs))
fun test-read-sexp()
  val expected = zipwith([hydrogen/idasp, hydrogen/idvoice, hydrogen/idasp/v,
                   hydrogen/idvoice/v, hydrogen/no-pvmvpv, hydrogen/no-dh,
                   hydrogen/no-voiceobs, hydrogen/no-asp],
                  [[0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 1],
                   [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2],
                   [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 0, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                   [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 2, 1, 2, 1, 1, 0, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 2, 1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, -1, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 2],
                   [1, 0, 1, 0, 1, 1, -1, -1, 0, 0, 1, 1, 1, 0, 1, -1, -1, 0, 0, 1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, -1, 0, -1, 0, 0, 1, 0, 1, -1, -1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 0, 1, 1, 2, 1, 2],
                   [0, 1, 1, -1, -1, 0, 0, 1, 1, -1, -1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, -1, -1, 0, -1, -1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, -1, -1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, 1, 1, -2, -2, -1, -1, -2, -2, -1, -1, -1, -1, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, -1, -1, 0, 0, -1, -1, 0, 0, 0, 1, 1, 0, 0, 1, 1]], Column)
  val actual = read-sexp("ot_learning/pseudo-korean.sexp")
  test(expected, actual) 
fun test-all-methods()
  test([[idasp, idvoice, idasp/v, idvoice/v, no-dh],
        [no-pvmvpv, no-voiceobs, no-asp]],
       rcd(read-sexp("ot_learning/pseudo-korean.sexp")))
pub fun main ()
  println("Running tests...")
  transpose([])
  test-abs-to-relative()
  test-read-sexp()
  test-all-methods()
