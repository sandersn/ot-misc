import { testall, meterUnparsed } from "./util/testing.ts"
import type { StressMark } from "./types.ts"
import { Word } from "./word.ts"
import {
  parse,
  footBin,
  wsp,
  allFeetLeft,
  allFeetRight,
  mainLeft,
  mainRight,
  wordFootLeft,
  wordFootRight,
  iambic,
  footNonFinal,
  nonFinal,
} from "./constraint.ts"
import { strictEqual as eq, deepEqual as equal } from "node:assert"
// Note: parseTrochaic isn't correct, but good enough for testing constraints
import { parseTrochaic } from "./word.ts"

testall("Markendness constraints", {
  parseStressEmpty() {
    equal(parseTrochaic([]), { head: undefined, feet: [] })
  },
  parseEvalOneHeavy: markEval(parse, "_", 1),
  parseEvalOneLight: markEval(parse, ".", 1),
  parseEvalFive: markEval(parse, "..'...", 3),
  parseEvalSix: markEval(parse, "..'....", 4),
  footBinEvalEmpty() {
    equal(footBin.evaluate(new Word([])), 0)
  },
  footBinEvalOneHeavy: markEval(footBin, "_", 0),
  footBinEvalOneLight: markEval(footBin, ".", 0),
  footBinEvalFive: markEval(footBin, "..'...", 0),
  footBinEvalSix: markEval(footBin, "..'....", 0),
  wspEvalEmpty: markEval(wsp, "", 0),
  wspEvalHeavyPrimary: markEval(wsp, "'_", 0),
  wspEvalHeavySecondary: markEval(wsp, "`_", 0),
  wspEvalHeavyUnstressed: markEval(wsp, "_", 1),
  wspEvalLightUnstressed: markEval(wsp, ".", 0),
  wspEvalLightPrimary: markEval(wsp, "'.", 0),
  wspEvalHeavyLight: markEval(wsp, ".'_.", 0),
  wspEvalHeavyLightUnstressed: markEval(wsp, "._.", 1),
  wspEvalMultipleHeavyUnstressed: markEval(wsp, "__._.", 3),
  wspEvalMultipleHeavyMixed: markEval(wsp, "__.`_.", 2),
  aflEvalEmpty: markEval(allFeetLeft, "", 0),
  aflEvalOneUnstressed: markEval(allFeetLeft, ".", 0),
  aflEvalOneLight: markEval(allFeetLeft, "'.", 0),
  aflEvalOneHeavy: markEval(allFeetLeft, "'_", 0),
  aflEvalTwo: markEval(allFeetLeft, "'..", 0),
  aflEvalFourOneStress: markEval(allFeetLeft, "..'..", 2),
  aflEvalFourTwoStress: markEval(allFeetLeft, "'..'..", 2),
  aflEvalFiveTwoStressInitial: markEval(allFeetLeft, "'...'..", 3),
  aflEvalFiveTwoStress: markEval(allFeetLeft, ".'..'..", 4),
  afrEvalEmpty: markEval(allFeetRight, "", 0),
  afrEvalOneUnstressed: markEval(allFeetRight, ".", 0),
  afrEvalOneLight: markEval(allFeetRight, "'.", 0),
  afrEvalOneHeavy: markEval(allFeetRight, "'_", 0),
  afrEvalTwo: markEval(allFeetRight, "'..", 0),
  afrEvalFourOneStress: markEval(allFeetRight, "..'..", 0),
  afrEvalFourTwoStress: markEval(allFeetRight, "'..'..", 2),
  afrEvalFiveTwoStressInitial: markEval(allFeetRight, "'...'..", 3),
  afrEvalFiveTwoStress: markEval(allFeetRight, ".'..'..", 2),
  mainLeftEvalEmpty: markEval(mainLeft, "", 0),
  mainLeftEvalOneUnstressed: markEval(mainLeft, ".", 0),
  mainLeftEvalOneLight: markEval(mainLeft, "'.", 0),
  mainLeftEvalOneHeavy: markEval(mainLeft, "'_", 0),
  mainLeftEvalTwo: markEval(mainLeft, "'..", 0),
  mainLeftEvalFourOneStress: markEval(mainLeft, "..'..", 2),
  mainLeftEvalFourTwoStress: markEval(mainLeft, "'..'..", 2),
  mainLeftEvalFiveTwoStressInitial: markEval(mainLeft, "'...`..", 0),
  mainLeftEvalFiveTwoStressSecondary: markEval(mainLeft, "`...'..", 3),
  mainLeftEvalFiveTwoStressNonInitial: markEval(mainLeft, ".'..`..", 1),
  mainLeftEvalFiveTwoStressNonInitialSecondary: markEval(mainLeft, ".`..'..", 3),
  mainRightEvalEmpty: markEval(mainRight, "", 0),
  mainRightEvalOneUnstressed: markEval(mainRight, ".", 0),
  mainRightEvalOneLight: markEval(mainRight, "'.", 0),
  mainRightEvalOneHeavy: markEval(mainRight, "'_", 0),
  mainRightEvalTwo: markEval(mainRight, "'..", 0),
  mainRightEvalFourOneStress: markEval(mainRight, "..'..", 0),
  mainRightEvalFourTwoStress: markEval(mainRight, "'..`..", 2),
  mainRightEvalFourTwoStressSecondary: markEval(mainRight, "`..'..", 0),
  mainRightEvalFiveTwoStressInitial: markEval(mainRight, "'...`..", 3),
  mainRightEvalFiveTwoStressNonInitial: markEval(mainRight, ".'..`..", 2),
  mainRightEvalFiveTwoStressNonInitialSecondary: markEval(mainRight, ".`..'..", 0),
  wflEvalEmpty: markEval(wordFootLeft, "", 0),
  wflEvalOneUnstressed: markEval(wordFootLeft, ".", 1),
  wflEvalOneStressed: markEval(wordFootLeft, "'.", 0),
  wflEvalTwoNonInitial: markEval(wordFootLeft, ".'.", 1),
  wflEvalTwoInitial: markEval(wordFootLeft, "'..", 0),
  wflEvalFiveFinal: markEval(wordFootLeft, "....'.", 1),
  wflEvalFiveTwoStressed: markEval(wordFootLeft, ".'..'..", 1),
  wfrEvalEmpty: markEval(wordFootRight, "", 0),
  wfrEvalOneUnstressed: markEval(wordFootRight, ".", 1),
  wfrEvalOneStressed: markEval(wordFootRight, "'.", 0),
  wfrEvalTwoNonInitial: markEval(wordFootRight, ".'.", 0),
  wfrEvalTwoInitial: markEval(wordFootRight, "'..", 0),
  wfrEvalFiveFinal: markEval(wordFootRight, "....'.", 0),
  wfrEvalFiveTwoStressed: markEval(wordFootRight, ".'..'..", 0),
  iambicEvalEmpty: markEval(iambic, "", 0),
  iambicEvalOne: markEval(iambic, ".", 0),
  iambicEvalTwoInitial: markEval(iambic, "'..", 1),
  iambicEvalTwo: markEval(iambic, ".'.", 0),
  iambicEvalFour: markEval(iambic, "'..'..", 2),
  footNonFinalEvalEmpty: markEval(footNonFinal, "", 0),
  footNonFinalEvalOne: markEval(footNonFinal, ".", 0),
  footNonFinalEvalOneStress: markEval(footNonFinal, "'.", 1),
  footNonFinalEvalTwoInitial: markEval(footNonFinal, "'..", 0),
  footNonFinalEvalTwoFinal: markEval(footNonFinal, ".'.", 1),
  footNonFinalEvalThree: markEval(footNonFinal, "'..'.", 1),
  nonFinalEvalEmpty: markEval(nonFinal, "", 0),
  nonFinalEvalOne: markEval(nonFinal, ".", 0),
  nonFinalEvalOneStress: markEval(nonFinal, "'.", 1),
  nonFinalEvalTwo: markEval(nonFinal, "'..", 1),
  nonFinalEvalThreeInitial: markEval(nonFinal, "'...", 0),
  nonFinalEvalThreeInitialSecondary: markEval(nonFinal, "'..`.", 1),
})
testall("Faithfulness constraints", {})
function markEval(constraint: StressMark, overt: string, count: number): () => void {
  return () => equal(constraint.evaluate(parseTrochaic(meterUnparsed(overt))), count)
}
